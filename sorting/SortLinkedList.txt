/* 
Problem-34
How do we sort the linked list.
*/


/*
Sort a linked list using insertion sort.
*/


/* Java */

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
	public static ListNode insertionSortList(ListNode head) {
 
		if (head == null || head.next == null)
			return head;
 
		ListNode newHead = new ListNode(head.val);
		ListNode pointer = head.next;
 
		// loop through each element in the list
		while (pointer != null) {
			// insert this element to the new list
 
			ListNode innerPointer = newHead;
			ListNode next = pointer.next;
 
			if (pointer.val <= newHead.val) {
				ListNode oldHead = newHead;
				newHead = pointer;
				newHead.next = oldHead;
			} else {
				while (innerPointer.next != null) {
 
					if (pointer.val > innerPointer.val && pointer.val <= innerPointer.next.val) {
						ListNode oldNext = innerPointer.next;
						innerPointer.next = pointer;
						pointer.next = oldNext;
					}
 
					innerPointer = innerPointer.next;
				}
 
				if (innerPointer.next == null && pointer.val > innerPointer.val) {
					innerPointer.next = pointer;
					pointer.next = null;
				}
			}
 
			// finally
			pointer = next;
		}
 
		return newHead;
	}
}



/* C++ */

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *insertionSortList(ListNode *head) {
        ListNode *dummy = new ListNode(0); dummy->next = head;
        ListNode *prev_j, *ptr_j, *prev_i, *ptr_i;
        prev_i = dummy; ptr_i = dummy->next;
        while (ptr_i) {
            prev_j = dummy; ptr_j = dummy->next;
            while (ptr_j->val < ptr_i->val)
                prev_j = ptr_j, ptr_j = ptr_j->next;
            if (ptr_j == ptr_i) {
                prev_i = ptr_i;
                ptr_i = ptr_i->next;
            }
            else {
                prev_i->next = ptr_i->next;
                prev_j->next = ptr_i;
                ptr_i->next = ptr_j;
                ptr_i = prev_i->next;
            }
        }
        return dummy->next;
    }
};