/*
Given n, generate all structurally unique BST's (binary search trees) that store values 1...n.

For example,
Given n = 3, your program should return all 5 unique BST's shown below.

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3

*/


/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; left = null; right = null; }
 * }
 */
public class Solution {
    public ArrayList<TreeNode> generateTrees(int n) {
         // Start typing your Java solution below
         // DO NOT write main() function
         if(n == 0){
             return generate(1, 0);
         }
         return generate(1, n);        
    }
    
    public ArrayList<TreeNode> generate(int start, int end){
         ArrayList<TreeNode> subTree = new ArrayList<TreeNode>();
         if(start > end){
             subTree.add(null);
             return subTree;
         }
         
         for(int i = start; i <= end; i++){
             ArrayList<TreeNode> leftSubTree = generate(start, i - 1);
             ArrayList<TreeNode> rightSubTree = generate(i + 1, end);
             for(int j = 0; j < leftSubTree.size(); j++){
                 for(int k = 0; k < rightSubTree.size(); k++){
                     TreeNode node = new TreeNode(i);
                     node.left = leftSubTree.get(j);
                     node.right = rightSubTree.get(k);
                     subTree.add(node);
                 }
             }
         }
        return subTree;
    }    
    
}

## another solution

/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; left = null; right = null; }
 * }
 */
public class Solution {
    public ArrayList<TreeNode> generateTrees(int n) {
        // Start typing your Java solution below
        // DO NOT write main() function
        return generateTrees(1,n);
    }
    
    public ArrayList<TreeNode> generateTrees(int a, int b){
        ArrayList<TreeNode> res = new ArrayList<TreeNode>();
        
        if(a>b){
            //当begin>end时，要往ret AL里面添加null，使得每个AL里面至少有一个元素（null）。这样可以避免判断只有左区间或只有右区间的情况。
            res.add(null);   
        }else if(a==b){
            res.add(new TreeNode(a));
        }else if(a<b){
            for(int i=a;i<=b;i++){
                ArrayList<TreeNode> temp1 = generateTrees(a,i-1);
                ArrayList<TreeNode> temp2 = generateTrees(i+1,b);
                
                for(TreeNode n:temp1){
                    for(TreeNode m:temp2){
                        TreeNode temp= new TreeNode(i);
                        temp.left=n;
                        temp.right=m;
                        res.add(temp);
                    }
                }

            }
        } 
        return res;
    }
}