/*
题目：一个台阶总共有n级，如果一次可以跳1级，也可以跳2级。求总共有多少总跳法，并分析算法的时间复杂度。
*/

/* Solution */


public class Solution {
	public static long climbStairs(int n) {

        if (n == 0) {
            return 0;
        }
        
        if (n == 1) {
            return 1;
        }
        
        if (n == 2) {
            return 2;
        }

		int n1 = 1;
		int n2 = 2;
		int current = 0;

		for (int i = 3; i <= n; i++ ) {
			current = n1 + n2;
			n1 = n2;
			n2 = current;
		}
		
		return current;
	}
}


###########

/*
				/ 1					n = 1
fibonacci(n) =    1					n = 2
				/ f(n-1) + f(n-2) 	n > 2
*/


/*
		/ 1		n = 1
f(n) =    2		n = 2
		/ f(n-1) + f(n-2) 	n > 2
*/

public class JumpTheStair {

	public static long getFNRecursively(int n) {

		if (n == 1) {
			return 1;
		} else if (n ==2) {
			return 2;
		}  else {
			return getFNRecursively(n-1) + getFNRecursively(n-2);
		}
	}

	public static void getFNIteratively(int n) {
		int n1 = 1;
		int n2 = 2;
		int current = 0;

		for (int i = 3; i <= n; i++ ) {
			current = n1 + n2;
			n1 = n2;
			n2 = current;
		}

		System.out.println("the nth fibonacci is: " + current);

	}
	
	public static void main(String[] args) {
		System.out.println("the nth fibonacci is: " + getFNRecursively(10));
		System.out.println("-----------------");
		getFNIteratively(10);
	}	
}

/*
扩展1：一个台阶总共有n级，如每次跳动的级数可以是1到n的任意级数。求总共有多少总跳法，并分析算法的时间复杂度。
*/

/*
扩展2：用8个1*2的小长条去覆盖一个2*8的棋盘，要求完全覆盖棋盘，小长条彼此不重叠。求总共有多少总覆盖方法。
*/

/*
先假设对于一个2*n的棋盘，总覆盖数为f(n)。

当n=1时，是一个2*1的棋盘，只可能有一个覆盖方法，即 f(1) = 1

当n=2时，是一个2*2的棋盘，有两种可能，1）当最左边坚着放一个长条时，
剩下没放的地方就是一个2*1的棋盘了；2）当最左上角横着放一个长条时，
剩下左下角也只能横着放一个长条。综上，有 f(2) = f(1) + 1 = 2

当n=3时，是一个2*3的棋盘，1）当最左边放一个长条时，剩下没放的地方
是一个2*2的棋盘；2）当最左上角横着放一个长条时，左下角也只有一种放法，
即横着放一个长条，剩下右边一个2*1的空间没放。综上，f(3) = f(2) + f(1)
……

依次类推。
综上，只考虑最左边的2*2棋盘，有两种放法。1）当最左边竖着放一个长条时，
剩下的就是f(n-1)；2）当最左上角横着放一个长条时，最左下角也只可能
横着放一个长条，这个就占用了最左边2*2的棋盘，剩下的就是f(n-2)了。
故有

        /  1                          n=1
f(n)=      2                          n=2
        /  f(n-1)+f(n-2)              n>2

其实结论和原题是一样的。

*/


# Python code
def f ( n ):
    a = 1
    b = 2
    if n <= 1 :
        return a
    if n<=2 :
        return b
    for i in range( 3,n+1):
        t= a + b
        a = b
        b = t
    return b
    
print ( f ( 5))