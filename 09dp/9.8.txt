9.8.txt

# Given an infinite number of quarters(25 cents), dimes(10 cents), nickels(5cents)
# and pennies(1 cent), write code to calculate the number of ways of representing
# n cents.

----

import java.util.ArrayList;

public class Solution {

	public int makeChange(int n, int denom) {
		int next_denom = 0;
		
		switch (denom) {
		case 25:
			next_denom = 10;
			break;
			
		case 10:
			next_denom = 5;
			break;
			
		case 5:
			next_denom = 1;
			break;
			
		case 1:
			return 1;
		}
		
		int ways = 0;
		
		for (int i = 0; i * denom <= n; i++) {
			ways += makeChange(n - i*denom, next_denom);
		}
		
		return ways;
	}

	public static void main(String[] args) {
		System.out.println(new Solution().makeChange(100, 25));
	}
}

----

public class Solutions {
	
	int makeChange(int n) {
		int[] denoms = {25, 10, 5, 1};
		return makeChange(n, denoms, 0);
	}

	int makeChange(int amount, int[] denoms, int index) {
		if (index >= denoms.length - 1) {
			return 1;
		}

		int denomAmount = denoms[index];
		int ways = 0;

		for (int i = 0; i * denomAmount <= amount; i++) {
			int amountRemaining = amount - i * denomAmount;
			ways += makeChange(amountRemaing, denoms, index+1);
		}

		return ways;
	}

}


---- with DP 

public class Solution1 {

	int makeChange(int n) {
		int[] denoms = {25, 10, 5, 1};
		int[][] map = new int[n+1][denoms.length];
		return makeChange(n, denoms, 0, map);
	}

	int makeChange(int amount, int[] denoms, int index, int[][] map) {
		if (map[amount][index] > 0) {
			return map[amount][index];
		}

		if (index >= denoms.length - 1) {
			return 1;
		}

		int denomAmount = denoms[index];
		int ways = 0;

		for (int i = 0; i * denomAmount <= amount; i++) {
			int amountRemaining = amount - i * denomAmount;
			ways += makeChange(amountRemaining, denoms, index+1, map);
		}

		map[amount][index] = ways;
//		System.out.println("map[" + amount + "][" + index + "] = " + map[amount][index]);

		return ways;
	}

	public static void main(String[] args) {
		long startTime = System.currentTimeMillis();
		System.out.println(new Solution1().makeChange(10000));
		long endTime   = System.currentTimeMillis();
		long totalTime = endTime - startTime;
		System.out.println(totalTime);
	}
	
}