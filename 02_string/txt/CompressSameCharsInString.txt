1.5.txt

Asked by Amazon.com

# Implement a method to perform basic string compression using the counts of repeated characters.
# For example, the string aabbcccccaaa would become a2b1c5a3. If the "compressed" string would not
# become smaller that the original string, your method should return the original string.


public class Solution {
	String compressBetter(String str) {
		if (str == null || str.isEmpty() == true) {
			return str;
		}

		//int afterCompressionSize = -1;
		StringBuilder newStr = new StringBuilder();
		char last = str.charAt(0);
		int count = 1;

		for (int i = 1; i < str.length(); i++) {
			if (str.charAt(i) == last) {
				count++;
			} else {
				//afterCompressionSize += 1 + String.valueOf(count).length();
				newStr.append(last);
				newStr.append(count);
				last = str.charAt(i);
				count = 1;
			}
		}

		newStr.append(last);
		newStr.append(count);
		//afterCompressionSize += 1 + String.valueOf(count).length();

		//if (afterCompressionSize >= str.length()) {
		if (newStr.toString().length() >= str.length()) {
			return str;
		} else {
			return newStr.toString();
		}
	}
  
    public static void main(String[] args) {
    	
    	System.out.println(new Solution().compressBetter("aabcccccaaa"));  
    	
    }
}