1.1.txt

# Implement an algorithm to determine if a string has all unique characters. What if
# you cannot use additional data structures?

# Or sort the input string in O(n*log(n)), then linearly check the string for
# neighboring characters that are identical.



time O(n)  space O(1)

public boolean isUniqueChars(String string) {
	if (string.length() > 256) {
		return false;
	}

	boolean[] char_set = new boolean[256];

	for (int i = 0; i < str.length(); i++) {
		int val = str.charAt(i);

		if (char_set[val] == true) {
			return false;
		} else {
			char_set[val] = true;
		}
	}

	return true;
}  

public boolean isUniqueChars(String str) {
	// assume that the string only uses the lower case letters a through z. This
	// will allow us to use just a single int. Then, we can reduce our space usage
	// by a factor of eight by using a bit vector.

	int checker = 0;

	for (int i = 0; i < str.length(); i++) {
		int val = str.charAt(i) - 'a';

		if ((checker & (1 << val)) > 0) {
			return false;
		}

		checker |= (1 << val);
	}

	return true;
}