1.3.1.txt

# From 4th Edition

# Design an algorithm and write code to remove the duplicate characters in a string
# without using any additional buffer. NOTE: One or two additional variables are fine.
# An extra copy of the array is not.

# FOLLOW UP
# Write the test cases for this method.

------------
# 1. Time Complexity is O(N^2)

public void removeDuplicates(char[] str) {
	if (str == null) {
		return;
	}

	if (str.length < 2) {
		return;
	}

	int tail = 1;

	for (int i = 1; i < str.length; i++) {
		int j = 0;

		for (j = 0; j < tail; ++j) {
			if (str[i] == str[j]) {
				break;
			}
		}

		if (j == tail) {
			str[tail] = str[i];
			tail++;
		}
	}

	str[tail] = 0;
}




-----------
# 2. With Addtional Memory of Constant Size

public class Solution {
	public char[] removeDuplicates(char[] str) {
		if (str == null || str.length < 2) {
			return str;
		}
		
		boolean[] flags = new boolean[256];
		
		for (int i = 0; i < 256; i++) {
			flags[i] = false;
		}
		
		flags[str[0]] = true;
		int tail = 1;
		
		for (int i = 1; i < str.length; i++) {
			if (flags[str[i]] == false) {
				str[tail] = str[i];
				tail++;
				flags[str[i]] = true;
			}
				
		}
		
		while( tail < str.length) {
			str[tail++] = '\0';
		}
			
		return str;
	}

	public static void main(String[] args) {
		
		String str = "abababab";
		System.out.println(new Solution().removeDuplicates(str.toCharArray()));
	}
}