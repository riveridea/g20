/*
121. Best Time to Buy and Sell Stock

Say you have an array for which the ith element is the price of a given stock on day i.

If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.
*/

#
There is an obvious O(N2) solution, but in fact we can do better in just O(N).

To solve this problem efficiently, you would need to track the minimum value's index. As you traverse, update the minimum value's index when a new minimum is met. Then, compare the difference of the current element with the minimum value. Save the buy and sell time when the difference exceeds our maximum difference (also update the maximum difference).


/* Java */

public class Solution {
    public int maxProfit(int[] prices) {
        
        if (prices.length == 0) {
            return 0;
        }
        
        int profit = 0;
        int min = prices[0];
        
        for (int i = 0; i < prices.length; i++) {
            min = Math.min(min, prices[i]);
            profit = Math.max(profit, prices[i] - min);
        }
        
        return profit;
    }
}