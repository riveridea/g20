/*
Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.

For example, given the following triangle
[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]
The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).

Note:
Bonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle.
*/


#1
public class Solution {
    public int minimumTotal(ArrayList<ArrayList<Integer>> triangle) {
        
        if(triangle==null || triangle.size()==0) 
            return 0;
        ArrayList<Integer> res = new ArrayList<Integer>();
        
        for(int i=0;i<triangle.size();i++){
            ArrayList<Integer> temp = triangle.get(i);
            
            res.add(0,i>0?temp.get(0)+res.get(0):temp.get(0));
            
            for(int j=1;j<res.size()-1;j++){
                res.set(j,Math.min(res.get(j),res.get(j+1))+temp.get(j));
            }
            
            if(res.size()>1)
                res.set(res.size()-1,
                        res.get(res.size()-1)+temp.get(res.size()-1));
        }
        
        int min=Integer.MAX_VALUE;
        for(Integer temp:res){
            min=Math.min(temp,min);
        }
        return min;        
    }
}


#2

http://www.cnblogs.com/xishibean/archive/2013/03/01/2951296.html

public class Solution {
    public int minimumTotal(ArrayList<ArrayList<Integer>> triangle) {
        
        if(triangle == null) return 0;
        if(triangle.size()==0) return 0;
        int sz = triangle.size();
        
        int[] d = new int[sz];
        //int[] nd = new int[sz];
        ArrayList<Integer> temp = triangle.get(sz-1);
        for(int i=0; i<sz; i++) {
            d[i] = temp.get(i);
        }
        
        
        for(int i=sz-2; i>=0; i-- ) {
            for( int j=0; j<=i;j++) {
                d[j] = triangle.get(i).get(j) + Math.min(d[j], d[j+1]);
            }            
        }
        
        return d[0];        
    }
}


#3
http://blog.csdn.net/guixunlong/article/details/8850169

public class Solution {
    public int minimumTotal(ArrayList<ArrayList<Integer>> triangle) {
        // Start typing your Java solution below
        // DO NOT write main() function
        Integer[] array = triangle.get(triangle.size()-1).toArray(new Integer[0]);
        for (int i=triangle.size()-2; i>=0; i--) {
            ArrayList<Integer> row = triangle.get(i);
            for (int j=0; j<row.size(); j++) {
                array[j] = row.get(j) + Math.min(array[j], array[j+1]);
            }
        }
        return array[0];
    }
}

http://blog.unieagle.net/2012/10/31/leetcode%E9%A2%98%E7%9B%AE%EF%BC%9Atriangle%EF%BC%8C%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/




