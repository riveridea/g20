4.2.txt

# Given a directed graph, design an algorithm to find out whether there is a route between two nodes.

public enum State {
	Unvisited, Visiting, Visited;
}

public boolean search(Graph g, Node start, Node end) {
	Queue<Node> q = new LinkedList<Node>();

	for (Node u : g.getNodes()) {
		u.state = State.Unvisited;
	}

	start.state = State.unvisited;
	q.add(start);

	Node u = null;

	while (q.isEmpty() != false) {
		u = q.remove();

		if (u!= null) {
			for (Node v : u.getAdjecent()) {
				if (V.state == State.Unvisited) {
					if (v == end) {
						return true;
					} else {
						v.state = State.Visiting;
						q.add(v);
					}
				}
			}

			u.state = State.Visited;
		}
	}

	return false;
}